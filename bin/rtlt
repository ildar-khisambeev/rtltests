#!/bin/bash

# file: rtlt,  v0.0
# date: 2014-07-11
# by:   Ildar Khisambeev, ildar@cs.niisi.ras.ru
# aim:  to prepare, run tests, and report results;
#
# version history:
#	1.0		2014-07-11	release;
#
# TODO:
#	- comments!
#	- manuals!
#
echo "$(date +'%F %T') Starting ${0##*/} at host $(hostname -s)"
. /share4s/rtltests/etc/rtlt.conf
###############################   SUBROUTINES   ################################
usage() {
	case "$1" in
	p|P|prepare)
		echo "Usage: ${0##*/} p|prepare|u|update WORKDIR [TESTPATH...] [PRJ_PATH]"
		echo "\`rtlt prepare' creates/updates workspace for the runs"
		echo
		echo "  WORKDIR  - personal name of the workspace to be created/updated"
		echo "  TESTPATH - paths to tests or whole bases, RELATIVE to $RTLT_BASES, may contain bash wildcards for the filename expansion"
		;;
	rr|runrt)
		echo "Usage: ${0##*/} rr|runrt WORKDIR TASKFILE"
		echo "\`rtlt runrt' launches series of random tests"
		echo
		echo "  WORKDIR  - path to the workspace, current directory is default"
		echo "  TASKFILE - name of the file with tasks to run, rt.task is default"
		;;
	*)
		echo "Usage: ${0##*/} <COMMAND> [ARGS]"
		echo "\`rtlt' is made to prepare and run bases of tests, random tests, and to report results for them."
		echo
		echo "Commands:"
		echo "  p | prepare | u | update"
		echo "  c | clean"
		echo "  r | run"
		echo "  s | show | status"
		echo "  x | stop"
		echo "  h | help | usage"
		echo "For additional help on COMMAND enter '${0##*/} help COMMAND'"
		;;
	esac
}
checktest() {
	[[ -d "$1" && -f "$1/rom.bin" ]] &&
	if [ "$bugsonly" ]; then
		! grep "No mismatches" $1/report.txt >/dev/null 2>&1
	else
		:
	fi
	return
}
isBugged() {
	if [ "$vmipsonly" ]; then
		! egrep -q 'successful end of modeling|v0=0000000000001234' $1/report.txt
	elif [ "$rtlonly" ]; then
		! egrep -q 'v0=0000000000001234' $1/report.txt
	else
		! egrep -q 'No mis' $1/report.txt
	fi
	return
}
################################   ARGUMENTS   #################################
mode=$1
shift
#[ -z "$mode" ] && mode="run"
case "$mode" in
p|P|prepare|u|U|update) echo "                    Mode: prepare"
	WORKDIR=$1
	shift
	[ -z "$WORKDIR" ] && WORKDIR='.'
	mkdir -p $WORKDIR || {
		echo >&2 "Wrong directory $WORKDIR"
		exit 2
	}
	[ -z "$*" -a ! -s "$WORKDIR/rtlt.list" ] && {
		echo >&2 "You chose no tests for the new base, exit."
		usage p
		exit 2
	}
	for arg in $(cat $WORKDIR/rtlt.list 2>/dev/null) "$@"; do
		grep -F -qx "$arg" $WORKDIR/rtlt.list 2>/dev/null ||
		echo $arg >> $WORKDIR/rtlt.list
		for subdir in $RTLT_BASES/$arg; do
			if [ -f $subdir/special_options.cfg ]; then
				ln -s $subdir/special_options.cfg $WORKDIR/special_options.cfg # WARNING: this line works when prepare single base only
			fi
			for line in $(find $subdir -type d)
			do
				if [ -d "$WORKDIR/${line##*/}" ]; then
					[ "$verbose" ] && echo "$line already linked"
				else
					line=$(readlink -e "$line")
					checktest "$line" &&
					echo -e "Linking test \033[1m${line##*/}\033[0m" &&
					cp -rs $line $WORKDIR
				fi
			done
		done
	done
	cp -u ${RTLT_ETC}testlistrun/* $WORKDIR
	echo "$(date +'%F %T') Done."
	echo -n " * Check settings manually: "
	ls ${RTLT_ETC}testlistrun/
	;;
c|clean)
	echo "                    Mode: clean"
	echo "Mode not implemented yet."
	;;
r|run)
	echo "                    Mode: run"
	echo "Mode not implemented yet."
	;;
rr|runrt)
	echo "                    Mode: runrt"
#	echo "Mode not implemented yet."
	rtbatchrun=$(type -p rtbatchrun.sh)
	if [ ! "$rtbatchrun" ]
	then
		echo >&2 "${0##*/}: Can't find script rtbatchrun.sh. Exit."
		exit 2
	fi

	WORKDIR=$1
	shift
	[ -z "$WORKDIR" ] && WORKDIR='.'
	[ -d "$WORKDIR" ] || {
		echo >&2 "Wrong directory $WORKDIR"
		exit 2
	}
	WORKDIR=$(readlink -e "$WORKDIR")
	TASKFILE=$1
	[ -z "$TASKFILE" ] && TASKFILE='rt.task'
	[ -f "$WORKDIR/$TASKFILE" ] || {
		echo >&2 "Can't find task file $WORKDIR/$TASKFILE"
		exit 2
	}
	TMPDIR=${WORKDIR/$RTLT_ROOT/$RTLT_TMP}
#	echo -e "Make clean temporary directory \033[1m$TMPDIR\033[0m"
#	[ -d "$TMPDIR" ] && tmpdirexists=true
	mkdir -p $TMPDIR || {
		echo >&2 "Can't make directory $TMPDIR"
		TMPDIR=$WORKDIR
	}
	# clone workdir to tmpdir
	# TODO: now it works only with relative paths in rt.conf
	for file in $WORKDIR/*
	do
		[ -e "${file/$WORKDIR/$TMPDIR}" ] || ln -s $file ${file/$WORKDIR/$TMPDIR}
	done
	cd $TMPDIR
	line=0
	while read template threads
	do
		(( line += 1 ))
		[[ "$template" =~ ^#.*$ ]] && continue
		[ "$threads" -ge 0 ] >/dev/null 2>&1 || {
			echo >&2 "Wrong threads number in task file $WORKDIR/$TASKFILE on line $line, skipping..."
			continue
		}
		i=1
		while [ $i -le $threads ]
		do
			# TODO: now jobnames are non-unique; be careful!
		    while JobId=$(qsub -@ sge_request -v PATH -N rt-$template-$i -o $WORKDIR/rt-$template-$i.outerr \
				$rtbatchrun -m $template 5 ); test -z "$JobId"
		    do
				echo >&2 "${0##*/}: Submitting rt-$template-$i failed, sleeping and trying again..."
				sleep 10
		    done
			(( i += 1 ))
		done
#		echo "run template $template, $threads threads"
	done < $WORKDIR/$TASKFILE
	;;
u|update)
	echo "                    Mode: update"
	echo "Mode not implemented yet."
	;;
s|show|status)
	echo "                    Mode: show"
	echo "Mode not implemented yet."
	;;
st|stop)
	echo "                    Mode: stop"
	echo "Mode not implemented yet."
	;;
rpt|report)									# commit to bugtracker, fill RTDB
	echo "                    Mode: report"
	echo "Mode not implemented yet."
	;;
h|help|usage)
	usage "$1"
	;;
*) usage
	;;
esac

exit 0

fileconf="tl.conf"
vmipsonly=
rtlonly=
bugsonly=
filelist=()
while getopts :c:f:hmbVR option
do
	case $option in
	c) fileconf=$OPTARG;;
	b) bugsonly=true;;
	V) vmipsonly="-V";;
	R) rtlonly="-R";;
	f) filelist+=("$OPTARG");;
	h) usage
		exit 0 ;;
	\?)	echo "Wrong argument $OPTARG. Exit."
		usage
		exit 2 ;;
	esac
done
shift $((OPTIND-1))

if [ "$vmipsonly" -a "$rtlonly" ]; then
	echo >&2 "User, you demand both vmips-only and RTL-only modes. Please, try again. Exit."
	exit 2
fi

################################   CHECK TOOLS   ###############################
type compare.pl >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Can't find tool compare.pl. Exit."
	exit 2
}
type reg_v2h.pl >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Can't find tool reg_v2h.pl."
#	echo >&2 "${0##*/}: Can't find tool reg_v2h.pl. Exit."
#	exit 2
}
type cch_v2h.pl >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Can't find tool cch_v2h.pl."
#	echo >&2 "${0##*/}: Can't find tool cch_v2h.pl. Exit."
#	exit 2
}
type checkipc.pl >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Can't find tool checkipc.pl."
#	echo >&2 "${0##*/}: Can't find tool cch_v2h.pl. Exit."
#	exit 2
}
runtest=$(type -p runtest.sh)
if [ ! "$runtest" ]
then
	echo >&2 "${0##*/}: Can't find script runtest.sh. Exit."
	exit 2
fi

##############################   GET TEST LIST   ###############################

##########################   GET SETTINGS FROM FILE   ##########################
TL_PRJ_PATH='.'
TL_VMI_PATH=
TL_VMI_OPTFILE=
TL_PIPED=
TL_DEL=
TL_ASC=
TL_TIMELIMIT=
TL_THREADS=0
TL_PASSDIR=
	
if [ -f "$fileconf" ]; then
	echo -e "$(date +'%F %T') Configuration file: \033[1m$fileconf\033[0m"
	. $fileconf
else
	usage
	echo >&2 "${0##*/}: Configuration file $fileconf not found. Exit."
	exit 2
fi

###########################   CHECK CONFIGURATION   ############################
echo -e "                    Working directory: \033[1m$PWD\033[0m"
[ "$TL_TASKID" ] || TL_TASKID=tl.$(whoami).$(date +%F).$(hostname -s).$$
echo -e "                    Task ID: \033[1m$TL_TASKID\033[0m"

[ "$TL_DEL" ]		&& TL_DEL="-d"
[ "$TL_ASC" ]		&& TL_ASC="-x"
[ "$TL_PIPED" ]		&& TL_PIPED="-p"
[ "$TL_THREADS" ]	|| TL_THREADS=0
[ "$TL_THREADS" -ge 0 ] >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Wrong threads limit '$TL_THREADS'. Exit"
	exit 2
}
if [ "$TL_TIMELIMIT" ]; then
[ "${TL_TIMELIMIT##-t }" -gt 0 ] >/dev/null 2>&1 || {
	echo >&2 "${0##*/}: Wrong timelimit ${TL_TIMELIMIT##-t }. Exit"
	usage
	exit 2
}
fi
if [ "$TL_PASSDIR" ]; then
	mkdir -p $TL_PASSDIR || echo >&2 "Can't make directory [$TL_PASSDIR]."
	TL_PASSDIR=$(readlink -e "$TL_PASSDIR")
	if [[ -d "$TL_PASSDIR" && "$TL_PASSDIR" =~ ^$PWD ]]; then
		TL_DEL=''
		echo -e "                    Passed tests dir: \033[1m$TL_PASSDIR\033[0m"
	else
		echo >&2 "Passed tests dir [$TL_PASSDIR] is unavailable. Skipping."
		TL_PASSDIR=''
	fi
fi

################################   CHECK VMIPS   ###############################
rev=
if [ ! "$rtlonly" ]; then
	[ "$TL_VMI_PATH" ] && TL_VMI_PATH+=/
	if ${TL_VMI_PATH}vmips --version >/dev/null 2>&1
	then
		rev=$(${TL_VMI_PATH}vmips --version | head -1)
		echo -e "                    Vmips version: \033[1m${rev#Revision: }\033[0m"
	else
		echo >&2 "${0##*/}: Can't run ${TL_VMI_PATH}vmips. Exit."
		exit 2
	fi
#	echo "TL_VMI_OPTFILE is [$TL_VMI_OPTFILE]"
fi
	[ "$TL_VMI_OPTFILE" ] &&
	if [ -f "$TL_VMI_OPTFILE" ]; then
		TL_VMI_OPTFILE="-o configfile=$(readlink -e $TL_VMI_OPTFILE)"
	else
		[ ! "$rtlonly" ] && echo >&2 "${0##*/}: Warning. Vmips options file '$TL_VMI_OPTFILE' not found."
		TL_VMI_OPTFILE=
	fi

#################################   CHECK RTL   ################################
if [ ! "$vmipsonly" ]; then
	if [ $TL_PRJ_PATH ]; then
		TL_PRJ_PATH=$(readlink -e "$TL_PRJ_PATH")
		TL_PRJ_PATH+=/
		if [ ! -d "$TL_PRJ_PATH" -o ! -d "$TL_PRJ_PATH/INCA_libs" ]; then
			echo >&2 "${0##*/}: Project path $TL_PRJ_PATH is not ready. Exit."
			exit 2
		fi
		if [ ! -x "$TL_PRJ_PATH/scripts/ncv.sh" ]; then
			echo >&2 "${0##*/}: Can't execute script $TL_PRJ_PATH/scripts/ncv.sh. Exit."
			exit 2
		fi
		echo -e "                    Project path: \033[1m${TL_PRJ_PATH%/prj/}\033[0m"
	else
		echo >&2 "${0##*/}: TL_PRJ_PATH is not set. Exit."
		exit 2
	fi
fi
###############################   SUBMIT LOOP   ################################

exit 0
